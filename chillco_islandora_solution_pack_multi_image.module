<?php

/**
 * Implements hook_menu().
 */
function chillco_islandora_solution_pack_multi_image_menu() {
  $items = array();
  $items['islandora/object/%islandora_object/manage/multi_image_container'] = array(
    'title' => 'Image Container',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'chillco_islandora_solution_pack_multi_image_manage_images_menu',
    'page arguments' => array(2),
    'access callback' => 'islandora_paged_content_manage_pages_access_callback',
    'access arguments' => array(2, array('islandora:chillco_isp_multi_image_container_cmodel')),
    'file' => 'includes/manage_images.inc',
  );
  $items['islandora/object/%islandora_object/manage/multi_image_container/ingest_multi'] = array(
      'title' => 'Add Multiple Images',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('chillco_islandora_solution_pack_multi_image_ingest_multiple_items_form', 2),
      'type' => MENU_LOCAL_ACTION,
      'access callback' => 'islandora_object_access',
      'access arguments' => array(ISLANDORA_INGEST, 2),
      'file' => 'includes/manage_images.inc',
  );
  return $items;
}

/**
 * Implements hook_form_alter().
 */
function chillco_islandora_solution_pack_multi_image_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'islandora_paged_content_manage_pages_sequences_form' || $form_id == 'islandora_paged_content_manage_pages_delete_form') {
    $object = $form_state['object'];
    if (in_array('islandora:chillco_isp_multi_image_container_cmodel', $object->models)) {
      $form['#submit'][] = 'chillco_islandora_solution_pack_multi_image_paged_batch_submit';
    }
  }
  if ($form_id == 'islandora_delete_object_form') {
    $object = $form_state['object'];
    if (in_array('islandora:chillco_isp_multi_image_container_cmodel', $object->models)) {
      $form['description']['#markup'] = t('This will remove the image container object and all related image item objects. This action cannot be undone.');
      $form['#submit'] = array('chillco_islandora_solution_pack_multi_image_islandora_delete_object_form_delete_image_container_submit');
    }
  }
}

/**
 * Implements hook_theme().
 *
 * We supply a pattern so we can overide templates at the theme level if needed.
 * we can append a pid to a template and the new template file will be called
 * (the pids colon should be replaced with a dash).
 */
function chillco_islandora_solution_pack_multi_image_theme($existing, $type, $theme, $path) {
  return array(
    'chillco_isp_multi_image_item' => array(
      'template' => 'theme/chillco-isp-multi-image-item',
      // We can add pids to the end of this pattern in our preprocess function
      // and templates will be able to have have a pid appended to the template
      // name to overide a template on a per object basis. An example template
      // would be named islandora-basic-image--islandora-27.tpl.phps.
      'pattern' => 'chillco_islandora_solution_pack_large_image__',
      'variables' => array('islandora_object' => NULL),
    ),
  );
}

/**
 * Implements hook_preprocess().
 */
function chillco_islandora_solution_pack_multi_image_preprocess_chillco_isp_multi_image_item(&$variables) {
  drupal_add_js('misc/form.js');
  drupal_add_js('misc/collapse.js');
  $islandora_object = $variables['islandora_object'];
  $parent = $islandora_object->parent;
  $repository = $islandora_object->repository;
  module_load_include('inc', 'islandora', 'includes/datastream');
  module_load_include('inc', 'islandora', 'includes/utilities');
  // Get DC metadata.
  if (isset($parent['DC']) && islandora_datastream_access(ISLANDORA_VIEW_OBJECTS, $parent['DC'])) {
    try {
      $dc = $parent['DC']->content;
      $dc_object = DublinCore::importFromXMLString($dc);
    }
    catch (Exception $e) {
      drupal_set_message(t('Error retrieving object %s %t', array('%s' => $islandora_object->id, '%t' => $e->getMessage())), 'error', FALSE);
    }
  }

  // Get MODS metadata.
  if (module_exists('islandora_mods_display')) {
    $variables['islandora_mods'] = theme('islandora_mods_display_display', array('islandora_object' => $parent, 'print' => FALSE));
  }

  $variables['islandora_dublin_core'] = isset($dc_object) ? $dc_object : NULL;
  $variables['dc_array'] = isset($dc_object) ? $dc_object->asArray() : array();
  $variables['islandora_object_label'] = $islandora_object->label;
  $variables['theme_hook_suggestions'][] = 'chillco_islandora_solution_pack_large_image__' . str_replace(':', '_', $islandora_object->id);
  $variables['parent_collections'] = islandora_get_parents_from_rels_ext($islandora_object);
  // Thumbnail.
  if (isset($islandora_object['TN']) && islandora_datastream_access(ISLANDORA_VIEW_OBJECTS, $islandora_object['TN'])) {
    $params = array(
      'title' => $islandora_object->label,
      'path' => url("islandora/object/{$islandora_object->id}/datastream/TN/view"),
    );
    $variables['islandora_thumbnail_img'] = theme('image', $params);
  }
  module_load_include('inc', 'islandora', 'includes/solution_packs');

  $params = array();

  if (isset($islandora_object['IMAGE']) && islandora_datastream_access(ISLANDORA_VIEW_OBJECTS, $islandora_object['IMAGE'])) {
    // Get token to allow access to XACML protected datastreams.
    // Always use token authentication in case there is a global policy.
    module_load_include('inc', 'islandora', 'includes/authtokens');
    $token = islandora_get_object_token($islandora_object->id, 'IMAGE', 2);
    $jp2_url = url("islandora/object/{$islandora_object->id}/datastream/IMAGE/view",
      array(
        'absolute' => TRUE,
        'query' => array('token' => $token),
      ));
    // Prep large image for display with openseadragon or jquery zoom viewer.
    $params['jp2_url'] = $jp2_url;
    $params['title'] = $islandora_object->label;
    $params['path'] = url("islandora/object/{$islandora_object->id}/datastream/IMAGE/view");
  }

  $viewer = islandora_get_viewer($params, 'chillco_islandora_solution_pack_large_image_viewers', $islandora_object);
  $variables['islandora_content'] = '';
  if ($viewer) {
    $variables['islandora_content'] = $viewer;
  }
  // If no viewer is configured just show the jpeg.
  elseif (isset($islandora_object['IMAGE']) && islandora_datastream_access(ISLANDORA_VIEW_OBJECTS, $islandora_object['IMAGE'])) {
    $params = array(
      'title' => $islandora_object->label,
      'path' => url("islandora/object/{$islandora_object->id}/datastream/IMAGE/view"),
    );
    $variables['islandora_content'] = theme('image', $params);
  }
  else {
    $variables['islandora_content'] = NULL;
  }
}

/**
 * Delete all the page objects related to the book object being deleted.
 *
 * @param array $form
 *   The Drupal form.
 * @param array $form_state
 *   The Drupal form state.
 */
function chillco_islandora_solution_pack_multi_image_islandora_delete_object_form_delete_image_container_submit(array $form, array &$form_state) {
  module_load_include('inc', 'islandora_paged_content', 'includes/batch');
  module_load_include('inc', 'islandora_paged_content', 'includes/utilities');
  $object = $form_state['object'];
  $get_pid = function($o) {
    return $o['pid'];
  };
  $pages = array_values(array_map($get_pid, islandora_paged_content_get_pages($object)));
  batch_set(islandora_paged_content_delete_pages_batch($object, $pages));
  // Called from within this submit handler rather than from the Drupal Form API
  // as we need the object to exist to generate the pages and if we run this.
  // batch operation from a submit handler any submit handlers to be called
  // afterwards will not get called, which is a bug/feature of the Form API.
  islandora_delete_object_form_submit($form, $form_state);
}

/**
 * Update the paged content thumbnail provided from a form.
 */
function chillco_islandora_solution_pack_multi_image_paged_batch_submit($form, &$form_state) {
  $object = $form_state['object'];
  chillco_islandora_solution_pack_multi_image_update_container_asset($object);
}

/**
 * Implements hook_islandora_required_objects().
 */
function chillco_islandora_solution_pack_multi_image_islandora_required_objects(IslandoraTuque $connection) {
  $module_path = drupal_get_path('module', 'chillco_islandora_solution_pack_multi_image');
  // Image Container Content Model.
  $multi_image_container_content_model = $connection->repository->constructObject('islandora:chillco_isp_multi_image_container_cmodel');
  $multi_image_container_content_model->owner = 'fedoraAdmin';
  $multi_image_container_content_model->label = 'Chillco Islandora Multi Image Container Content Model';
  $multi_image_container_content_model->models = 'fedora-system:ContentModel-3.0';

  // DS-COMPOSITE-MODEL Datastream.
  $datastream = $multi_image_container_content_model->constructDatastream('DS-COMPOSITE-MODEL', 'X');
  $datastream->label = 'DS-COMPOSITE-MODEL';
  $datastream->mimetype = 'text/xml';
  $datastream->setContentFromFile("$module_path/data/datastreams/chillco_islandora_solution_pack_multi_image_container_ds_composite_model.xml", FALSE);
  $multi_image_container_content_model->ingestDatastream($datastream);

  // Image Item Content Model.
  $multi_image_item_content_model = $connection->repository->constructObject('islandora:chillco_isp_multi_image_item_cmodel');
  $multi_image_item_content_model->owner = 'fedoraAdmin';
  $multi_image_item_content_model->label = 'Chillco Islandora Multi Image Item Content Model';
  $multi_image_item_content_model->models = 'fedora-system:ContentModel-3.0';

  // DS-COMPOSITE-MODEL Datastream.
  $datastream = $multi_image_item_content_model->constructDatastream('DS-COMPOSITE-MODEL', 'X');
  $datastream->label = 'DS-COMPOSITE-MODEL';
  $datastream->mimetype = 'text/xml';
  $datastream->setContentFromFile("$module_path/data/datastreams/chillco_islandora_solution_pack_multi_image_item_ds_composite_model.xml", FALSE);
  $multi_image_item_content_model->ingestDatastream($datastream);

  return array(
    'chillco_islandora_solution_pack_multi_image' => array(
      'title' => 'Chillco Islandora Solution Pack - Multi Image',
      'objects' => array(
        $multi_image_container_content_model,
        $multi_image_item_content_model,
      ),
    ),
  );
}

/**
 * Implements hook_CMODEL_PID_islandora_view_object().
 */
function chillco_islandora_solution_pack_multi_image_islandora_chillco_isp_multi_image_container_cmodel_islandora_view_object($object, $page_number, $page_size) {
  module_load_include('inc', 'islandora_paged_content', 'includes/utilities');
  $images = islandora_paged_content_get_pages($object);
  if ($image = reset($images)) {
    $object->children = $images;
    $image_object = islandora_object_load($image['pid']);
    $image_object->parent = $object;
    return chillco_islandora_solution_pack_multi_image_islandora_chillco_isp_multi_image_item_cmodel_islandora_view_object($image_object, $page_number, $page_size);
  }
}

/**
 * Implements hook_CMODEL_PID_islandora_view_object().
 */
function chillco_islandora_solution_pack_multi_image_islandora_chillco_isp_multi_image_item_cmodel_islandora_view_object($object, $page_number, $page_size) {
  module_load_include('inc', 'islandora_paged_content', 'includes/utilities');
  // Get parent container.
  if (!isset($object->parent)) {
    foreach ($object->relationships->get() as $relationship) {
      if ($relationship['predicate']['value'] == 'isMemberOf') {
        // Do something.
        $object->parent = islandora_object_load($relationship['object']['value']);
        $object->parent->children = islandora_paged_content_get_pages($object->parent);
      }
    }
  }
  $items = array();
  $prev = $current = $next = '';
  foreach ($object->parent->children as $key => $child) {
    $attributes = array();
    $classes = "";
    if ($key == $object->id) {
      $attributes['class'] = array('active');
      $classes = "active";
      $current = $key;
    }
    elseif (empty($prev) && empty($current)) {
      $prev = '<div class="pager-previous">' . l(t("Prev"), "islandora/object/{$key}") . '</div>';
    }
    elseif (!empty($current) && empty($next)) {
      $next = '<div class="pager-next">' . l(t("Next"), "islandora/object/{$key}") . '</div>';
    }
    $image = '<img src="' . url("islandora/object/{$key}/datastream/TN/view") . '">';
    $image = l($image, "islandora/object/{$key}", array('attributes' => $attributes, 'html' => TRUE));
    $label = l($child['label'], "islandora/object/{$key}", array('attributes' => $attributes));
    $items[$key] = "<div class='$classes'>{$image} {$label}</div>";
  }
  $output = '';
  if (!empty($prev) || !empty($next)) {
    $output .= '<div class="pager">' . $prev . $next . '</div>';
  }
  $output .= theme('chillco_isp_multi_image_item', array('islandora_object' => $object));
  $output .= theme('item_list', array('items' => $items));
  return array('' => $output);
}


/**
 * Implements hook_islandora_content_model_forms_form_associations().
 */
function chillco_islandora_solution_pack_multi_image_islandora_content_model_forms_form_associations() {
  return array(
    'chillco_islandora_solution_pack_multi_image_mods_form' => array(
      'content_model' => 'islandora:chillco_isp_multi_image_container_cmodel',
      'form_name' => 'Chillco Large image MODS form',
      'dsid' => 'MODS',
      'title_field' => array('titleInfo', 'title'),
      'transform' => 'mods_to_dc.xsl',
      'template' => FALSE,
    ),
  );
}

/**
 * Implements hook_CMODEL_PID_DSID_islandora_datastream_ingested().
 */
function chillco_islandora_solution_pack_multi_image_islandora_chillco_isp_multi_image_item_cmodel_OBJ_islandora_datastream_ingested(AbstractObject $object, AbstractDatastream $datastream) {
  chillco_islandora_solution_pack_large_image_islandora_chillco_isp_large_image_cmodel_islandora_object_ingested($object);
}

/**
 * Implements hook_CMODEL_PID_DSID_islandora_datastream_ingested().
 */
function chillco_islandora_solution_pack_multi_image_islandora_chillco_isp_multi_image_item_cmodel_IMAGE_islandora_datastream_ingested(AbstractObject $object, AbstractDatastream $datastream) {
  module_load_include('inc', 'islandora_paged_content', 'includes/utilities');

  chillco_islandora_solution_pack_large_image_islandora_chillco_isp_large_image_cmodel_islandora_object_ingested($object);
  $parent_pid = islandora_paged_content_get_relationship($object->relationships, FEDORA_RELS_EXT_URI, 'isMemberOf', NULL);
  $parent = islandora_object_load($parent_pid);
  if ($parent) {
    chillco_islandora_solution_pack_multi_image_update_container_asset($parent);
  }
}

/**
 * Implements hook_CMODEL_PID_DSID_islandora_object_ingested().
 */
function chillco_islandora_solution_pack_multi_image_islandora_chillco_isp_multi_image_container_cmodel_islandora_object_ingested(AbstractObject $object) {
  chillco_islandora_solution_pack_multi_image_update_container_asset($object);
}

/**
 * Implements hook_CMODEL_PID_DSID_islandora_datastream_ingested().
 */
function chillco_islandora_solution_pack_multi_image_islandora_chillco_isp_multi_image_container_cmodel_IMAGE_islandora_datastream_ingested(AbstractObject $object, AbstractDatastream $datastream) {
  module_load_include('inc', 'chillco_islandora_solution_pack_large_image', 'includes/derivatives');
  chillco_islandora_solution_pack_large_image_create_all_derivatives($object, TRUE);
}

/**
 * Updates the given paged content's thumbnail from the first page in the paged
 * content.
 *
 * @param AbstractObject $object
 *   The paged content object to update.
 *
 * @return bool
 *   TRUE on success, FALSE otherwise.
 */
function chillco_islandora_solution_pack_multi_image_update_container_asset(AbstractObject $object) {
  module_load_include('inc', 'islandora_paged_content', 'includes/utilities');

  static $current_pid;
  if (!islandora_paged_content_can_update_paged_content_thumbnail($object)) {
    return FALSE;
  }
  $images = islandora_paged_content_get_pages($object);
  $image = array_shift($images);
  if ($current_pid !== $image['pid']) {
    $current_pid = $image['pid'];
    $image = islandora_object_load($current_pid);
    $mime_detector = new MimeDetect();
    $dsid = 'IMAGE';
    $ext = $mime_detector->getExtension($image[$dsid]->mimeType);
    $file = drupal_realpath("temporary://{$image->id}_{$dsid}.{$ext}");
    $image[$dsid]->getContent($file);
    $ret = islandora_paged_content_update_datastream($object,
      $file,
      $dsid,
      $image->label);
    chillco_islandora_solution_pack_multi_image_islandora_chillco_isp_multi_image_container_cmodel_IMAGE_islandora_datastream_ingested($object, $object['IMAGE']);
    file_unmanaged_delete($file);
    return $ret;
  }
}
